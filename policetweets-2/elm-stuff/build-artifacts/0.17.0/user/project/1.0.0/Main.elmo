var _user$project$Main_ops = _user$project$Main_ops || {};
_user$project$Main_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$decodeTweets = _elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string);
var _user$project$Main$computeDisplayed = F2(
	function (tweets, regex) {
		return A2(
			_elm_lang$core$List$filter,
			function (tweet) {
				return _elm_lang$core$Basics$not(
					_elm_lang$core$List$isEmpty(tweet.matches));
			},
			A2(
				_elm_lang$core$List$map,
				function (tweet) {
					return {
						tweet: tweet,
						matches: A3(_elm_lang$core$Regex$find, _elm_lang$core$Regex$All, regex, tweet)
					};
				},
				tweets));
	});
var _user$project$Main$update = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p4 = _p1;
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'FetchSucceed':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p4,
						{tweets: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchFail':
				return {ctor: '_Tuple2', _0: _p4, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				var _p3 = _p2._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p4,
						{
							regex: _elm_lang$core$Regex$regex(_p3),
							displayedResults: A2(
								_user$project$Main$computeDisplayed,
								_p4.tweets,
								_elm_lang$core$Regex$regex(_p3))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Tweet = F2(
	function (a, b) {
		return {tweet: a, matches: b};
	});
var _user$project$Main$Model = F3(
	function (a, b, c) {
		return {tweets: a, displayedResults: b, regex: c};
	});
var _user$project$Main$UpdateRegex = function (a) {
	return {ctor: 'UpdateRegex', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Main_ops['=>'], 'max-width', '1000px'),
						A2(_user$project$Main_ops['=>'], 'color', '#554'),
						A2(_user$project$Main_ops['=>'], 'margin', '20px auto'),
						A2(_user$project$Main_ops['=>'], 'font-family', 'Helvetica')
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$input,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateRegex),
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_user$project$Main_ops['=>'], 'type', 'text'),
								A2(_user$project$Main_ops['=>'], 'font-size', '40px'),
								A2(_user$project$Main_ops['=>'], 'width', '100%'),
								A2(_user$project$Main_ops['=>'], 'font-family', 'monospace')
							]))
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_elm_lang$core$List$map,
					function (tweet) {
						return A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$style(
									_elm_lang$core$Native_List.fromArray(
										[
											A2(_user$project$Main_ops['=>'], 'padding', '5px')
										]))
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(tweet.tweet)
								]));
					},
					model.displayedResults))
			]));
};
var _user$project$Main$FetchFail = function (a) {
	return {ctor: 'FetchFail', _0: a};
};
var _user$project$Main$FetchSucceed = function (a) {
	return {ctor: 'FetchSucceed', _0: a};
};
var _user$project$Main$loadTweets = A3(
	_elm_lang$core$Task$perform,
	_user$project$Main$FetchFail,
	_user$project$Main$FetchSucceed,
	A2(_evancz$elm_http$Http$get, _user$project$Main$decodeTweets, './tweets.json'));
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A3(
		_user$project$Main$Model,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Regex$regex('')),
	_1: _user$project$Main$loadTweets
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
